setdiff(winner, loser)
# teams that have played the superbowl and have never won
setdiff(loser, winner)
# teams that have played the superbowl (both won and lost)?
intersect(winner, loser)
# how many teams have both won and lost the superbowl?
length(intersect(winner, loser))
response <- GET(url="https://github.com/gastonstat/stat133/raw/master/datasets/superbowl_teams.RData")
load(rawConnection(response$content))
rm(response)
# inspect
which.max(win_freqs)
max(which.max(win_freqs))
table(win_freqs)
HELLO<-as.matrix(table(win_freqs))
names(dimnames(HELLO)) <- c("Number of Wins","Teams")
HELLO
# create a vector 'champions' by sorting the frequencies
# 'win_freqs' in decreasing order
sort(win_freqs, decreasing = TRUE)
# make a barplot of 'champions' with barplot()
barplot(champions)
YearsandWinner<-data.frame(year,winner)
YearsandWinner[YearsandWinner$winner == "San Francisco 49ers",]
YearsandWinner[YearsandWinner$winner == "San Francisco 49ers",]$year
# What are the championships (i.e. years) of "Oakland Raiders"
YearsandWinner[YearsandWinner$winner == "Oakland Raiders",]
YearsandWinner[YearsandWinner$winner == "Oakland Raiders",]$year
# when was the last time Denver Broncos won a superbowl?
tail(YearsandWinner[YearsandWinner$winner == "Denver Broncos",]$year, n=1)
# create 'winner2', a copy of the vector 'winner'
winner2<-winner
winner2
# replace some team names in 'winner2' as follows:
# "New York Giants" to "NYG"
# "New York Jets" to "NYJ"
# "Kansas City Chiefs" to "KCC"
winner21<-replace(winner2,winner2 == "New York Giants", "NYG")
winner22<-replace(winner21,winner21 == "New York Jets", "NY")
winner23<-replace(winner22,winner22 == "Kansas City Chiefs", "KCC")
winner23
# =====================================================
# Losing team
# Write the commands to answer the following questions
# =====================================================
# get the losing teams of the first 5 superbowls
head(loser, n = 5L)
# get the losing teams of the last 5 superbowls
tail(loser, n = 5L)
which.max(los_freqs)
max(which.max(los_freqs))
WinnersAndLosers<-c(winner,loser)
length(unique(WinnersAndLosers))
Winners=data.frame(table(winner))
Losers=data.frame(table(loser))
teamdifference = merge(Winners, Losers, by.x="winner", by.y ="loser", all=TRUE)
teamdifference[c(1,10,12,18),]
teamdifference[20:28,]
# teams that have played the superbowl (both won and lost)?
teamdifference[ , 1]
# how many teams have both won and lost the superbowl?
nrow(teamdifference)-length(teamdifference[teamdifference == 'NA'])
intersect
response <- GET(url="https://github.com/gastonstat/stat133/raw/master/datasets/superbowl_teams.RData")
load(rawConnection(response$content))
rm(response)
# ins
Win_freqs <- table(winner)
# what team has won the superbowl most times?
# and how many times?
names(which.max(win_freqs))
max(Win_freqs)
length(union(winner,loser))
# teams that have played the superbowl and have never lost
setdiff(unique(winner),unique(loser))
# teams that have played the superbowl and have never won
setdiff(unique(loser),unique(winner))
# teams that have played the superbowl (both won and lost)?
intersect(winner,loser)
# how many teams have both won and lost the superbowl?
length(intersect(winner,loser))
response <- GET(url="https://github.com/gastonstat/stat133/raw/master/datasets/superbowl_teams.RData")
load(rawConnection(response$content))
rm(response)
win_freqs = table(winner)
# what team has won the superbowl most times?
# and how many times?
which.max(win_freqs)
max(win_freqs)
teams = unique(c(winner, loser))
length(teams)
# teams that have played the superbowl and have never lost
setdiff(teams, loser)
# teams that have played the superbowl and have never won
setdiff(teams, winner)
# teams that have played the superbowl (both won and lost)?
teams
# how many teams have both won and lost the superbowl?
intersect(unique(loser), unique(winner))
winner[which((year %% 100) %/% 10 == 7)]
loser[which((year %% 100) %/% 10 == 9)]
response <- GET(url="https://github.com/gastonstat/stat133/raw/master/datasets/superbowl_teams.RData")
load(rawConnection(response$content))
rm(response)
# inspect the objects with ls()
# (you should be able to see three vectors)
ls()
win_freqs=table(winner)
# what team has won the superbowl most times?
# and how many times?
which.max(win_freqs)
max(win_freqs)
length(union(winner,loser))
# teams that have played the superbowl and have never lost
setdiff(winner,loser)
# teams that have played the superbowl and have never won
setdiff(loser,winner)
# teams that have played the superbowl (both won and lost)?
union(loser,winner)
# how many teams have both won and lost the superbowl?
length(union(loser,winner))
response <- GET(url="https://github.com/gastonstat/stat133/raw/master/datasets/superbowl_teams.RData")
load(rawConnection(response$content))
rm(response)
# inspect the objects with ls()
unique(winner)
numunique=unique(winner)
length(numunique)
sort(numunique)
AllTeams=c(winner, loser)
unique(AllTeams)
NumofTeams = unique(c(winner, loser))
length(NumofTeams)
length(AllTeams)
response <- GET(url="https://github.com/gastonstat/stat133/raw/master/datasets/superbowl_teams.RData")
load(rawConnection(response$content))
rm(response)
win_freqs <- table(winner)
# what team has won the superbowl most times?
# and how many times?
head(sort(win_freqs, decreasing = TRUE), 1)
tail(year[winner == "Denver Broncos"], decreasing = TRUE, 1)
# create 'winner2', a copy of the vector 'winner'
winner2 <- winner
# replace some team names in 'winner2' as follows:
# "New York Giants" to "NYG"
# "New York Jets" to "NYJ"
# "Kansas City Chiefs" to "KCC"
"NYG" <- winner2[winner2 == "New York Giants"]
"NY" <- winner2[winner2 == "New York Jets"]
"KCC" <- winner2[winner2 == "Kansas City Chief"]
NYG
"NYG"
length(union(winner, loser))
# teams that have played the superbowl and have never lost
setdiff(winner, loser)
# teams that have played the superbowl and have never won
setdiff(loser, winner)
# teams that have played the superbowl (both won and lost)?
intersect(winner, loser)
# how many teams have both won and lost the superbowl?
length(intersect(winner, loser))
# what team won the superbowl in 2000
winner[year == 2000]
# what team lost the superbowl in 2000
loser[year == 2000]
response <- GET(url="https://github.com/gastonstat/stat133/raw/master/datasets/superbowl_teams.RData")
load(rawConnection(response$content))
rm(response)
win_freqs = table(winner)
# what team has won the superbowl most times?
# and how many times?
which.max(win_freqs)
max(win_freqs)
year[winner == "San Francisco 49ers"]
# What are the championships (i.e. years) of "Oakland Raiders"
year[winner == "Oakland Raiders"]
# when was the last time Denver Broncos won a superbowl?
max(year[winner == "Denver Broncos"])
# create 'winner2', a copy of the vector 'winner'
allTeams = union(winner, loser)
length(allTeams)
# teams that have played the superbowl and have never lost
allTeams[!allTeams %in% loser]
# teams that have played the superbowl and have never won
allTeams[!allTeams %in% winner]
# teams that have played the superbowl (both won and lost)?
allTeams
length(allTeams[allTeams %in% winner & allTeams %in% loser])
names(which.max(win_freqs)) # Pittsburgh Steelers
max(win_freqs) #6
(which.max(win_freqs))
win_freqs[names(win_freqs) == names(which.max(win_freqs))]
table(win_freqs)
champions <- c(sort(win_freqs, decreasing = TRUE))
champions
# make a barplot of 'champions' with barplot()
barplot(champions)
winner[year == "1982"]
winner[year == "1985"]
year[winner == "San Francisco 49ers"] #1982, 1985, 1989, 1990, 1995
year[winner == "Oakland Raiders"] # 1977, 1981, 1984
DB_win_yrs <- year[winner == "Denver Broncos"]
DB_win_yrs[length(DB_win_yrs)]
length(unique(winner)) + length(unique(loser)) #43
length(unique(winner)) - length(intersect(unique(winner), unique(loser)))
length(unique(loser)) - length(intersect(unique(winner), unique(loser)))
length(winner) + length(loser) - length(intersect(unique(winner), unique(loser)))
intersect((unique(winner)), (unique(loser)))
intersect((unique(winner)), (unique(loser)))
length(unique(winner)) - length(intersect(unique(winner), unique(loser)))
length(unique(loser)) - length(intersect(unique(winner), unique(loser)))
length(winner) + length(loser) - length(intersect(unique(winner), unique(loser)))
dec_winners <- c(winner[year == 1970], winner[year == 1980], winner[year == 1990], winner[year == 2000], winner[year ==2010])
response <- GET(url="https://github.com/gastonstat/stat133/raw/master/datasets/superbowl_teams.RData")
load(rawConnection(response$content))
rm(response)
# inspect the objects with ls()
# (you should be able to see three vectors)
ls()
win_freqs<-table(winner)
win_freqs
# what team has won the superbowl most times?
# and how many times?
which.max(win_freqs)
win_freqs[which.max(win_freqs)]
year[which(winner=="San Francisco 49ers")]
# What are the championships (i.e. years) of "Oakland Raiders"
year[which(winner=="Oakland Raiders")]
# when was the last time Denver Broncos won a superbowl?
tail(year[winner=="Denver Broncos"],1)
length(unique(c(winner, loser)))
# teams that have played the superbowl and have never lost
unique(winner[!(winner%in% loser)])
# teams that have played the superbowl and have never won
unique(loser[!(loser%in%winner)])
# teams that have played the superbowl (both won and lost)?
unique(c(winner,loser))
# how many teams have both won and lost the superbowl?
length(unique(winner[winner%in%loser]))
# what team won the superbowl in 2000
winner[which(year==2000)]
# what team lost the superbowl in 2000
loser[which(year==2000)]
winner[year==year%/%10*10]
response <- GET(url="https://github.com/gastonstat/stat133/raw/master/datasets/superbowl_teams.RData")
load(rawConnection(response$content))
rm(response)
table(winner)
win_freqs <- table(winner)
# what team has won the superbowl most times?
# and how many times?
win_most <-sort(win_freqs, decreasing = TRUE)
win_most[1]
y<-year[winner=="Denver Broncos"]
max(y)
diff_teams<-unique(c(winner,loser), incomparables=FALSE)
length(diff_teams)
# teams that have played the superbowl and have never lost
setdiff(union(winner, loser), loser)
# teams that have played the superbowl and have never won
setdiff(union(winner, loser), winner)
# teams that have played the superbowl (both won and lost)?
union(winner, loser)
# how many teams have both won and lost the superbowl?
length(intersect(winner, loser))
response <- GET(url="https://github.com/gastonstat/stat133/raw/master/datasets/superbowl_teams.RData")
load(rawConnection(response$content))
rm(response)
# inspect the objects with ls()
# (you should be able to see three vectors)
ls()
win_freqs<-table(winner)
# what team has won the superbowl most times?
# and how many times?
which.max(win_freqs)
last <- year[winner == "Denver Broncos"]
last[length(last)]
teams <- union(winner, loser)
length(teams)
# teams that have played the superbowl and have never lost
setdiff(winner, loser)
# teams that have played the superbowl and have never won
setdiff(loser, winner)
# teams that have played the superbowl (both won and lost)?
intersect(winner, loser)
# how many teams have both won and lost the superbowl?
length(intersect(winner, loser))
response <- GET(url="https://github.com/gastonstat/stat133/raw/master/datasets/superbowl_teams.RData")
load(rawConnection(response$content))
rm(response)
# inspect the objects with ls()
# (you should be able to see three vectors)
ls()
length(year) == length(winner) || length(year) == length(winner)
win_freqs = table(winner)
# what team has won the superbowl most times?
# and how many times?
win_freqs[which.max(win_freqs)]
df = data.frame(winner, year)
df[winner == "San Francisco 49ers", 2]
df[winner == "Oakland Raiders", 2]
max(df[winner == "Denver Broncos", 2])
los_freqs = table(loser)
# What is the team that have lost the superbowl
# the most times?, and how many times?
los_freqs[which.max(los_freqs)]
superTeams = unique(union(winner, loser))
length(superTeams)
# teams that have played the superbowl and have never lost
setdiff(superTeams, loser)
# teams that have played the superbowl and have never won
setdiff(superTeams, winner)
# teams that have played the superbowl (both won and lost)?
superTeams
# how many teams have both won and lost the superbowl?
intersect(winner, loser)
subset(df, year == 2000)$winner
# what team lost the superbowl in 2000
df2 = data.frame(loser, year)
response <- GET(url="https://github.com/gastonstat/stat133/raw/master/datasets/superbowl_teams.RData")
load(rawConnection(response$content))
rm(response)
# inspect the objects with ls()
# (you should be able to see three vectors)
ls()
uniwinner <- which(table(winner) == 1)
sort(uniwinner)
which.max(win_freqs)
win_freqs[which.max(win_freqs)]
DB_winner <- which(winner == "Denver Broncos")
year[DB_winner[length(DB_winner)]]
which.max(los_freqs)
length(unique(c(winner, loser)))
# teams that have played the superbowl and have never lost
setdiff(winner, loser)
# teams that have played the superbowl and have never won
setdiff(loser, winner)
# teams that have played the superbowl (both won and lost)?
unique(c(winner, loser))
# how many teams have both won and lost the superbowl?
length(unique(c(winner, loser))) - length(setdiff(winner,loser)) - length(setdiff(loser, winner))
response <- GET(url="https://github.com/gastonstat/stat133/raw/master/datasets/superbowl_teams.RData")
load(rawConnection(response$content))
rm(response)
win_freqs<-table(winner)
# what team has won the superbowl most times?
# and how many times?
winner[which.max(win_freqs)]
max(win_freqs)
max(year[winner=="Denver Broncos"])
loser[which.max(lose_freqs)]
max(lose_freqs)
length(unique(winner,loser))
# teams that have played the superbowl and have never lost
setdiff(winner,loser)
# teams that have played the superbowl and have never won
setdiff(loser,winner)
# teams that have played the superbowl (both won and lost)?
intersect(winner,loser)
# how many teams have both won and lost the superbowl?
length(intersect(winner,loser))
# what team won the superbowl in 2000
winner[year==2000]
# what team lost the superbowl in 2000
loser[year==2000]
# What are the champions of years 1970, 1980, 1990, 2000 & 2010?
winner[year==1970|year==1980|year==1990|year==2000|year==2010]
response <- GET(url="https://github.com/gastonstat/stat133/raw/master/datasets/superbowl_teams.RData")
load(rawConnection(response$content))
rm(response)
win_freqs <- table(winner)
table(win_freqs)
# what team has won the superbowl most times?
# and how many times?
winner[max(win_freqs)]
max(win_freqs)
tail(year[winner == "Denver Broncos"], n=1)
length(union(winner, loser))
# teams that have played the superbowl and have never lost
setdiff(winner, loser)
# teams that have played the superbowl and have never won
setdiff(loser, winner)
# teams that have played the superbowl (both won and lost)?
union(winner, loser)
# how many teams have both won and lost the superbowl?
length(intersect(winner, loser))
setwd("~/school/research/nimble-testing")
source('importance.R')
betaBernCode <- nimbleCode({
for (i in 1:SAMPS) {
x[i] ~ dbern(prob = p)
}
p ~ dbeta(alpha, beta)
})
library(nimble)
source('importance.R')
betaBernCode <- nimbleCode({
for (i in 1:SAMPS) {
x[i] ~ dbern(prob = p)
}
p ~ dbeta(alpha, beta)
})
x <- rbinom(n = 100, size = 1, prob = .4)
betaBernModel <- nimbleModel(betaBernCode,
constants = list(SAMPS = length(x)),
data = list(x = x),
inits = list(alpha = 10, beta = 30))
propCode <- nimbleCode({
#     for (i in 1:SAMPS) {
#         x[i] ~ dbern(prob = p)
#     }
p ~ dbeta(alpha, beta)
})
propModel <- nimbleModel(propCode,
constants = list(SAMPS = length(x)),
inits = list(alpha = 1, beta = 1))
sampler <- importance_sampler(betaBernModel, propModel, c("p"))
CbetaBern <- compileNimble(betaBernModel)
Cprop <- compileNimble(propModel)
Csampler <- compileNimble(sampler, project = betaBernModel)
source('importance.R')
Csampler <- compileNimble(sampler, project = betaBernModel)
source('importance.R')
setwd("~/school/research/nimble-testing")
source('importance.R')
source('importance.R')
sampler <- importance_sampler(betaBernModel, propModel, c("p"))
Csampler <- compileNimble(sampler, project = betaBernModel)
source('importance.R')
sampler <- importance_sampler(betaBernModel, propModel, c("p"))
Csampler <- compileNimble(sampler, project = betaBernModel)
source('importance.R')
sampler <- importance_sampler(betaBernModel, propModel, c("p"))
Csampler <- compileNimble(sampler, project = betaBernModel)
source('importance.R')
Csampler <- compileNimble(sampler, project = betaBernModel)
sampler <- importance_sampler(betaBernModel, propModel, c("p"))
Csampler <- compileNimble(sampler, project = betaBernModel)
source('importance.R')
sampler <- importance_sampler(betaBernModel, propModel, c("p"))
Csampler <- compileNimble(sampler, project = betaBernModel)
source('importance.R')
source('~/school/research/nimble-testing/test-importance.R', echo=TRUE)
sampler <- importance_sampler(betaBernModel, propModel, c("p"))
source('importance.R')
sampler <- importance_sampler(betaBernModel, propModel, c("p"))
Csampler <- compileNimble(sampler, project = betaBernModel)
source('importance.R')
sampler <- importance_sampler(betaBernModel, propModel, c("p"))
Csampler <- compileNimble(sampler, project = betaBernModel)
Csampler$run(10000)
w <- as.numeric(as.matrix(Csampler$weights["w"]))
s <- as.numeric(as.matrix(Csampler$mvSamps["p"]))
hist(s)
resample <- sample(s, prob = w, replace = TRUE)
hist(resample, freq = FALSE)
t = sum(x)
n = length(x)
curve(dbeta(x, 10 + t, 30 + n - t), add = TRUE)
(10 + t) /  (40 + n) ## posterior mean when solving analytically
mean(resample) ## posterior mean from sampling
Csampler$weights
Csampler$weights['w']
Csampler$weights['w'][1]
Csampler$weights['w', 2]
Csampler$weights['w', 2][1]
Csampler$weights['w']
source('importance.R')
sampler <- importance_sampler(betaBernModel, propModel, c("p"))
Csampler <- compileNimble(sampler, project = betaBernModel)
c
source('importance.R')
source('importance.R')
sampler <- importance_sampler(betaBernModel, propModel, c("p"))
Csampler <- compileNimble(sampler, project = betaBernModel)
Csampler$run(10000)
w <- as.numeric(as.matrix(Csampler$weights["w"]))
s <- as.numeric(as.matrix(Csampler$mvSamps["p"]))
hist(s)
resample <- sample(s, prob = w, replace = TRUE)
hist(resample, freq = FALSE)
t = sum(x)
n = length(x)
curve(dbeta(x, 10 + t, 30 + n - t), add = TRUE)
(10 + t) /  (40 + n) ## posterior mean when solving analytically
mean(resample) ## posterior mean from sampling
source('importance.R')
sampler <- importance_sampler(betaBernModel, propModel, c("p"))
Csampler <- compileNimble(sampler, project = betaBernModel)
sampler$run(50)
source('importance.R')
sampler <- importance_sampler(betaBernModel, propModel, c("p"))
sampler$run(50)
source('importance.R')
sampler <- importance_sampler(betaBernModel, propModel, c("p"))
sampler$run(50)
source('importance.R')
sampler <- importance_sampler(betaBernModel, propModel, c("p"))
sampler$run(50)
Csampler <- compileNimble(sampler, project = betaBernModel)
Csampler$run(10000)
w <- as.numeric(as.matrix(Csampler$weights["w"]))
s <- as.numeric(as.matrix(Csampler$mvSamps["p"]))
hist(s)
resample <- sample(s, prob = w, replace = TRUE)
hist(resample, freq = FALSE)
t = sum(x)
n = length(x)
curve(dbeta(x, 10 + t, 30 + n - t), add = TRUE)
(10 + t) /  (40 + n) ## posterior mean when solving analytically
mean(resample) ## posterior mean from sampling
